#!@PYTHON@

import argparse
import subprocess
import shutil
import os
import sys


def run_waydroid_upgrade(option=None):
    """Run the waydroid upgrade command with or without the -o option."""
    command = ["waydroid", "upgrade"]
    if option:
        command.append(option)
    subprocess.run(command, check=True)


def copy_directory_contents(src, dest):
    try:
        if not os.path.exists(dest):
            os.makedirs(dest)
        items = os.listdir(src)
        for item in items:
            src_path = os.path.join(src, item)
            dest_path = os.path.join(dest, item)
            if os.path.isdir(src_path):
                shutil.copytree(src_path, dest_path, dirs_exist_ok=True)
            else:
                shutil.copy2(src_path, dest_path)
        print(f"Contents of directory {src} copied to {dest}")
    except Exception as e:
        print(f"Error copying contents of directory {src} to {dest}: {e}")


def copy(src, dest, contents_only):
    if os.path.isfile(src):
        copy_file(src, dest)
    elif os.path.isdir(src):
        if contents_only:
            copy_directory_contents(src, dest)
        else:
            copy_directory(src, dest)


def copy_directory(src, dest):
    try:
        if not os.path.exists(dest):
            os.makedirs(dest)
        dest = os.path.join(dest, os.path.basename(src))
        shutil.copytree(src, dest, dirs_exist_ok=True)
        print(f"Directory {src} copied to {dest}")
    except Exception as e:
        print(f"Error copying directory {src} to {dest}: {e}")


def copy_file(src, dest):
    try:
        if not os.path.exists(os.path.dirname(dest)):
            os.makedirs(os.path.dirname(dest))
        shutil.copy2(src, dest)
        print(f"File {src} copied to {dest}")
    except Exception as e:
        print(f"Error copying file {src} to {dest}: {e}")


def mkdir(dir):
    if not os.path.exists(dir):
        os.makedirs(dir)


def run_shell(shell_args):
    """Run the specific lxc-attach command with additional arguments."""
    base_command = [
        "lxc-attach",
        "-P",
        "/var/lib/waydroid/lxc",
        "-n",
        "waydroid",
        "--clear-env",
        "--",
    ]
    if shell_args != None:
        command = base_command + shell_args
    else:
        command = base_command + "/system/bin/sh"
    subprocess.run(command, check=True)


def remove_files_and_directories(paths):
    for path in paths:
        try:
            if os.path.isfile(path):
                os.remove(path)
                print(f"Removed file: {path}")
            elif os.path.isdir(path):
                shutil.rmtree(path)
                print(f"Removed directory: {path}")
            else:
                print(f"Path does not exist: {path}")
        except Exception as e:
            print(f"Error removing {path}: {e}")



def execute_shell_command(command):
    """Execute a shell command passed as a string."""
    subprocess.run(command, shell=True, check=True)


def main():
    parser = argparse.ArgumentParser(
        description="Manage Waydroid and perform file operations."
    )
    subparsers = parser.add_subparsers(dest="action", help="Action to perform")

    # Subparser for the upgrade action
    upgrade_parser = subparsers.add_parser("upgrade", help="Run waydroid upgrade")
    upgrade_parser.add_argument(
        "-o",
        action="store_const",
        const="-o",
        help="Run waydroid upgrade with the -o option",
    )

    # Subparser for the copy action
    copy_parser = subparsers.add_parser("copy", help="Copy a file")
    copy_parser.add_argument("source", help="Source file to copy")
    copy_parser.add_argument("destination", help="Destination path")
    copy_parser.add_argument(
        "--contents-only",
        action="store_true",
        help="Copy only the contents of the directory, not the directory itself",
    )

    # Subparser for the exec action
    exec_parser = subparsers.add_parser("exec", help="Execute a shell command")
    exec_parser.add_argument(
        "command", nargs=argparse.REMAINDER, help="Shell command to execute"
    )

    # Subparser for the shell action
    shell_parser = subparsers.add_parser(
        "shell", help="Run the specific lxc-attach shell command"
    )
    shell_parser.add_argument(
        "shell_args", nargs=argparse.REMAINDER, help="Arguments for the shell command"
    )

    mkdir_parser = subparsers.add_parser("mkdir", help="mkdir")
    mkdir_parser.add_argument("directory", help="dest dir")

    rm_parser = subparsers.add_parser("rm", help="Remove files")
    rm_parser.add_argument("files", nargs="+", help="List of files to remove")

    args = parser.parse_args()

    if args.action == "upgrade":
        run_waydroid_upgrade(args.o)
    elif args.action == "copy":
        copy(args.source, args.destination, args.contents_only)
    # elif args.action == "exec":
    #     execute_shell_command(" ".join(args.command))
    # elif args.action == "shell":
    #     run_shell(args.shell_args)
    elif args.action == "mkdir":
        mkdir(args.directory)
    elif args.action == "rm":
        remove_files_and_directories(args.files)
    else:
        parser.print_help()
        sys.exit(1)


if __name__ == "__main__":
    main()
